#BlueJ class context
comment0.target=State
comment0.text=\r\n\ This\ class\ is\ for\ a\ specific\ State\ of\ a\ Connect4\ game\r\n\ \r\n\ @author\ (Sam\ Saxon)\r\n\ @version\ (2/11/2018)\r\n
comment1.params=
comment1.target=State()
comment1.text=\r\n\ Default\ constructor\ for\ objects\ of\ class\ State.\ 'X'\ is\ default\ player\r\n
comment10.params=
comment10.target=void\ printBoard()
comment10.text=\r\n\ Prints\ the\ game\ board\ of\ this\ State\ to\ the\ console\r\n
comment11.params=col
comment11.target=State\ place(int)
comment11.text=\r\n\ Places\ a\ piece\ in\ a\ column,\ swaps\ the\ player\ turn\ and\ returns\ the\ new\ State\r\n\r\n\ @param\ \ col\ \ the\ column\ to\ place\ the\ piece\ in.\ must\ be\ from\ [0,6]\r\n\ @return\ \ \ \ a\ copy\ of\ the\ old\ State\ with\ the\ piece\ placed\ in\ the\ column\r\n
comment12.params=
comment12.target=java.util.ArrayList\ getAvailable()
comment12.text=\r\n\ Returns\ an\ ArrayList\ of\ the\ valid\ moves\ of\ this\ state\ (column\ is\ not\ full)\r\n\r\n\ @return\ \ \ \ an\ ArrayList\ containting\ indexes\ of\ non-empty\ columns\r\n
comment13.params=
comment13.target=boolean\ hasEnded()
comment13.text=\r\n\ Returns\ true\ if\ the\ game\ is\ over\ (either\ player\ has\ 4\ in\ a\ row\ or\ the\ board\ is\ full)\r\n\ \r\n\ @return\ \ \ \ true\ if\ the\ game\ is\ over,\ false\ otherwise\r\n
comment14.params=
comment14.target=int\ score()
comment14.text=\r\n\ Calculates\ the\ heuristic\ score\ of\ this\ State.\ Higher\ score\ is\ better\ for\ player\ X,\ lower\ score\ is\ better\ for\ player\ O\r\n\r\n\ @return\ \ \ \ the\ score\ of\ the\ state\r\n
comment15.params=s\ depth\ maxDepth
comment15.target=int\ minimax(State,\ int,\ int)
comment15.text=\r\n\ Gets\ the\ minimax\ score\ for\ a\ State\r\n\r\n\ @param\ \ s\ the\ State\ to\ get\ the\ minimax\ value\ of\r\n\ @param\ \ depth\ the\ current\ depth\ of\ the\ recursive\ funtion\ (usually\ starts\ at\ 0)\r\n\ @param\ \ maxDepth\ the\ maximum\ depth\ of\ the\ minimax\ function,\ equal\ to\ the\ game\ difficulty\r\n\ @return\ \ \ \ the\ minimax\ score\ for\ the\ State\r\n
comment16.params=s\ depth\ alpha\ beta\ maxDepth
comment16.target=int\ alphaBeta(State,\ int,\ int,\ int,\ int)
comment17.params=s\ depth\ alpha\ beta\ player\ maxDepth
comment17.target=int\ negamax(State,\ int,\ int,\ int,\ int,\ int)
comment18.params=player\ difficulty
comment18.target=int\ getBestMove(char,\ int)
comment18.text=\r\n\ Uses\ the\ minimax\ function\ to\ calculate\ the\ best\ move\ for\ a\ player\r\n\r\n\ @param\ \ player\ \ the\ player\ to\ get\ the\ best\ move\ for.\ MUST\ be\ either\ 'O'\ or\ 'X'\r\n\ @param\ \ difficulty\ \ the\ difficulty\ of\ the\ game,\ higher\ difficulty\ returns\ a\ better\ move.\ should\ never\ be\ higher\ than\ 8\r\n\ @return\ \ \ \ the\ column\ number\ representing\ the\ best\ move\ for\ the\ given\ player\r\n
comment2.params=old
comment2.target=State(State)
comment2.text=\r\n\ Copy\ constructor\ for\ objects\ of\ class\ State.\ \r\n\ \r\n\ @param\ old\ the\ State\ to\ be\ copied\r\n
comment3.params=moveString
comment3.target=State\ template(java.lang.String)
comment4.params=
comment4.target=java.lang.String\ getMoveString()
comment5.params=m
comment5.target=void\ addMove(int)
comment6.params=
comment6.target=char\ getPlayerTurn()
comment6.text=\r\n\ gets\ the\ current\ players\ turn\r\n\ \r\n\ @return\ the\ current\ player's\ turn\r\n
comment7.params=
comment7.target=char[][]\ getBoard()
comment7.text=\r\n\ gets\ the\ State's\ board\r\n\ \r\n\ @return\ the\ current\ State's\ board\r\n
comment8.params=
comment8.target=int[]\ getWinningIndex()
comment8.text=\r\n\ gets\ the\ winning\ index\ of\ the\ board\ (null\ if\ neither\ player\ has\ won)\r\n\ \r\n\ @return\ the\ winningIndex\ of\ the\ game\ (null\ if\ game\ is\ not\ over)\r\n
comment9.params=
comment9.target=void\ swapTurn()
comment9.text=\r\n\ changes\ the\ turn\ of\ the\ current\ player\ (O\ becomes\ X\ or\ X\ becomes\ O)\r\n
numComments=19
